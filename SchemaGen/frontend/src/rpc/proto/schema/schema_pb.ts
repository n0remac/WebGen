// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/schema/schema.proto (package schema, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message schema.CreateSchemaRequest
 */
export class CreateSchemaRequest extends Message<CreateSchemaRequest> {
  /**
   * @generated from field: schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<CreateSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.CreateSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSchemaRequest {
    return new CreateSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSchemaRequest {
    return new CreateSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSchemaRequest {
    return new CreateSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSchemaRequest | PlainMessage<CreateSchemaRequest> | undefined, b: CreateSchemaRequest | PlainMessage<CreateSchemaRequest> | undefined): boolean {
    return proto3.util.equals(CreateSchemaRequest, a, b);
  }
}

/**
 * @generated from message schema.CreateSchemaResponse
 */
export class CreateSchemaResponse extends Message<CreateSchemaResponse> {
  /**
   * @generated from field: schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<CreateSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.CreateSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSchemaResponse {
    return new CreateSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSchemaResponse {
    return new CreateSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSchemaResponse {
    return new CreateSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSchemaResponse | PlainMessage<CreateSchemaResponse> | undefined, b: CreateSchemaResponse | PlainMessage<CreateSchemaResponse> | undefined): boolean {
    return proto3.util.equals(CreateSchemaResponse, a, b);
  }
}

/**
 * @generated from message schema.GetSchemaRequest
 */
export class GetSchemaRequest extends Message<GetSchemaRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.GetSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined, b: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetSchemaRequest, a, b);
  }
}

/**
 * @generated from message schema.GetSchemaResponse
 */
export class GetSchemaResponse extends Message<GetSchemaResponse> {
  /**
   * @generated from field: schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<GetSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.GetSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined, b: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse, a, b);
  }
}

/**
 * @generated from message schema.UpdateSchemaRequest
 */
export class UpdateSchemaRequest extends Message<UpdateSchemaRequest> {
  /**
   * @generated from field: schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<UpdateSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.UpdateSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSchemaRequest {
    return new UpdateSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSchemaRequest {
    return new UpdateSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSchemaRequest {
    return new UpdateSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSchemaRequest | PlainMessage<UpdateSchemaRequest> | undefined, b: UpdateSchemaRequest | PlainMessage<UpdateSchemaRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSchemaRequest, a, b);
  }
}

/**
 * @generated from message schema.UpdateSchemaResponse
 */
export class UpdateSchemaResponse extends Message<UpdateSchemaResponse> {
  /**
   * @generated from field: schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<UpdateSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.UpdateSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSchemaResponse {
    return new UpdateSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSchemaResponse {
    return new UpdateSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSchemaResponse {
    return new UpdateSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSchemaResponse | PlainMessage<UpdateSchemaResponse> | undefined, b: UpdateSchemaResponse | PlainMessage<UpdateSchemaResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSchemaResponse, a, b);
  }
}

/**
 * @generated from message schema.DeleteSchemaRequest
 */
export class DeleteSchemaRequest extends Message<DeleteSchemaRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.DeleteSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSchemaRequest {
    return new DeleteSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSchemaRequest {
    return new DeleteSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSchemaRequest {
    return new DeleteSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSchemaRequest | PlainMessage<DeleteSchemaRequest> | undefined, b: DeleteSchemaRequest | PlainMessage<DeleteSchemaRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSchemaRequest, a, b);
  }
}

/**
 * @generated from message schema.DeleteSchemaResponse
 */
export class DeleteSchemaResponse extends Message<DeleteSchemaResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.DeleteSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSchemaResponse {
    return new DeleteSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSchemaResponse {
    return new DeleteSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSchemaResponse {
    return new DeleteSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSchemaResponse | PlainMessage<DeleteSchemaResponse> | undefined, b: DeleteSchemaResponse | PlainMessage<DeleteSchemaResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSchemaResponse, a, b);
  }
}

/**
 * The Schema message represents a schema in the system.
 *
 * @generated from message schema.Schema
 */
export class Schema extends Message<Schema> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schema.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema {
    return new Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJsonString(jsonString, options);
  }

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean {
    return proto3.util.equals(Schema, a, b);
  }
}

