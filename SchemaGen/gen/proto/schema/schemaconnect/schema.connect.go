// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/schema/schema.proto

package schemaconnect

import (
	schema "SchemaGen/gen/proto/schema"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SchemaServiceName is the fully-qualified name of the SchemaService service.
	SchemaServiceName = "schema.SchemaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchemaServiceCreateSchemaProcedure is the fully-qualified name of the SchemaService's
	// CreateSchema RPC.
	SchemaServiceCreateSchemaProcedure = "/schema.SchemaService/CreateSchema"
	// SchemaServiceGetSchemaProcedure is the fully-qualified name of the SchemaService's GetSchema RPC.
	SchemaServiceGetSchemaProcedure = "/schema.SchemaService/GetSchema"
	// SchemaServiceUpdateSchemaProcedure is the fully-qualified name of the SchemaService's
	// UpdateSchema RPC.
	SchemaServiceUpdateSchemaProcedure = "/schema.SchemaService/UpdateSchema"
	// SchemaServiceDeleteSchemaProcedure is the fully-qualified name of the SchemaService's
	// DeleteSchema RPC.
	SchemaServiceDeleteSchemaProcedure = "/schema.SchemaService/DeleteSchema"
)

// SchemaServiceClient is a client for the schema.SchemaService service.
type SchemaServiceClient interface {
	CreateSchema(context.Context, *connect_go.Request[schema.CreateSchemaRequest]) (*connect_go.Response[schema.CreateSchemaResponse], error)
	GetSchema(context.Context, *connect_go.Request[schema.GetSchemaRequest]) (*connect_go.Response[schema.GetSchemaResponse], error)
	UpdateSchema(context.Context, *connect_go.Request[schema.UpdateSchemaRequest]) (*connect_go.Response[schema.UpdateSchemaResponse], error)
	DeleteSchema(context.Context, *connect_go.Request[schema.DeleteSchemaRequest]) (*connect_go.Response[schema.DeleteSchemaResponse], error)
}

// NewSchemaServiceClient constructs a client for the schema.SchemaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchemaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SchemaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schemaServiceClient{
		createSchema: connect_go.NewClient[schema.CreateSchemaRequest, schema.CreateSchemaResponse](
			httpClient,
			baseURL+SchemaServiceCreateSchemaProcedure,
			opts...,
		),
		getSchema: connect_go.NewClient[schema.GetSchemaRequest, schema.GetSchemaResponse](
			httpClient,
			baseURL+SchemaServiceGetSchemaProcedure,
			opts...,
		),
		updateSchema: connect_go.NewClient[schema.UpdateSchemaRequest, schema.UpdateSchemaResponse](
			httpClient,
			baseURL+SchemaServiceUpdateSchemaProcedure,
			opts...,
		),
		deleteSchema: connect_go.NewClient[schema.DeleteSchemaRequest, schema.DeleteSchemaResponse](
			httpClient,
			baseURL+SchemaServiceDeleteSchemaProcedure,
			opts...,
		),
	}
}

// schemaServiceClient implements SchemaServiceClient.
type schemaServiceClient struct {
	createSchema *connect_go.Client[schema.CreateSchemaRequest, schema.CreateSchemaResponse]
	getSchema    *connect_go.Client[schema.GetSchemaRequest, schema.GetSchemaResponse]
	updateSchema *connect_go.Client[schema.UpdateSchemaRequest, schema.UpdateSchemaResponse]
	deleteSchema *connect_go.Client[schema.DeleteSchemaRequest, schema.DeleteSchemaResponse]
}

// CreateSchema calls schema.SchemaService.CreateSchema.
func (c *schemaServiceClient) CreateSchema(ctx context.Context, req *connect_go.Request[schema.CreateSchemaRequest]) (*connect_go.Response[schema.CreateSchemaResponse], error) {
	return c.createSchema.CallUnary(ctx, req)
}

// GetSchema calls schema.SchemaService.GetSchema.
func (c *schemaServiceClient) GetSchema(ctx context.Context, req *connect_go.Request[schema.GetSchemaRequest]) (*connect_go.Response[schema.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// UpdateSchema calls schema.SchemaService.UpdateSchema.
func (c *schemaServiceClient) UpdateSchema(ctx context.Context, req *connect_go.Request[schema.UpdateSchemaRequest]) (*connect_go.Response[schema.UpdateSchemaResponse], error) {
	return c.updateSchema.CallUnary(ctx, req)
}

// DeleteSchema calls schema.SchemaService.DeleteSchema.
func (c *schemaServiceClient) DeleteSchema(ctx context.Context, req *connect_go.Request[schema.DeleteSchemaRequest]) (*connect_go.Response[schema.DeleteSchemaResponse], error) {
	return c.deleteSchema.CallUnary(ctx, req)
}

// SchemaServiceHandler is an implementation of the schema.SchemaService service.
type SchemaServiceHandler interface {
	CreateSchema(context.Context, *connect_go.Request[schema.CreateSchemaRequest]) (*connect_go.Response[schema.CreateSchemaResponse], error)
	GetSchema(context.Context, *connect_go.Request[schema.GetSchemaRequest]) (*connect_go.Response[schema.GetSchemaResponse], error)
	UpdateSchema(context.Context, *connect_go.Request[schema.UpdateSchemaRequest]) (*connect_go.Response[schema.UpdateSchemaResponse], error)
	DeleteSchema(context.Context, *connect_go.Request[schema.DeleteSchemaRequest]) (*connect_go.Response[schema.DeleteSchemaResponse], error)
}

// NewSchemaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchemaServiceHandler(svc SchemaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	schemaServiceCreateSchemaHandler := connect_go.NewUnaryHandler(
		SchemaServiceCreateSchemaProcedure,
		svc.CreateSchema,
		opts...,
	)
	schemaServiceGetSchemaHandler := connect_go.NewUnaryHandler(
		SchemaServiceGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	)
	schemaServiceUpdateSchemaHandler := connect_go.NewUnaryHandler(
		SchemaServiceUpdateSchemaProcedure,
		svc.UpdateSchema,
		opts...,
	)
	schemaServiceDeleteSchemaHandler := connect_go.NewUnaryHandler(
		SchemaServiceDeleteSchemaProcedure,
		svc.DeleteSchema,
		opts...,
	)
	return "/schema.SchemaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchemaServiceCreateSchemaProcedure:
			schemaServiceCreateSchemaHandler.ServeHTTP(w, r)
		case SchemaServiceGetSchemaProcedure:
			schemaServiceGetSchemaHandler.ServeHTTP(w, r)
		case SchemaServiceUpdateSchemaProcedure:
			schemaServiceUpdateSchemaHandler.ServeHTTP(w, r)
		case SchemaServiceDeleteSchemaProcedure:
			schemaServiceDeleteSchemaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchemaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSchemaServiceHandler struct{}

func (UnimplementedSchemaServiceHandler) CreateSchema(context.Context, *connect_go.Request[schema.CreateSchemaRequest]) (*connect_go.Response[schema.CreateSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("schema.SchemaService.CreateSchema is not implemented"))
}

func (UnimplementedSchemaServiceHandler) GetSchema(context.Context, *connect_go.Request[schema.GetSchemaRequest]) (*connect_go.Response[schema.GetSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("schema.SchemaService.GetSchema is not implemented"))
}

func (UnimplementedSchemaServiceHandler) UpdateSchema(context.Context, *connect_go.Request[schema.UpdateSchemaRequest]) (*connect_go.Response[schema.UpdateSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("schema.SchemaService.UpdateSchema is not implemented"))
}

func (UnimplementedSchemaServiceHandler) DeleteSchema(context.Context, *connect_go.Request[schema.DeleteSchemaRequest]) (*connect_go.Response[schema.DeleteSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("schema.SchemaService.DeleteSchema is not implemented"))
}
