// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/sensor/sensor.proto (package sensor, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message sensor.CreateSensorRequest
 */
export class CreateSensorRequest extends Message<CreateSensorRequest> {
  /**
   * @generated from field: sensor.Sensor sensor = 1;
   */
  sensor?: Sensor;

  constructor(data?: PartialMessage<CreateSensorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.CreateSensorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor", kind: "message", T: Sensor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSensorRequest {
    return new CreateSensorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSensorRequest {
    return new CreateSensorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSensorRequest {
    return new CreateSensorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSensorRequest | PlainMessage<CreateSensorRequest> | undefined, b: CreateSensorRequest | PlainMessage<CreateSensorRequest> | undefined): boolean {
    return proto3.util.equals(CreateSensorRequest, a, b);
  }
}

/**
 * @generated from message sensor.CreateSensorResponse
 */
export class CreateSensorResponse extends Message<CreateSensorResponse> {
  /**
   * @generated from field: sensor.Sensor sensor = 1;
   */
  sensor?: Sensor;

  constructor(data?: PartialMessage<CreateSensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.CreateSensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor", kind: "message", T: Sensor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSensorResponse {
    return new CreateSensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSensorResponse {
    return new CreateSensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSensorResponse {
    return new CreateSensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSensorResponse | PlainMessage<CreateSensorResponse> | undefined, b: CreateSensorResponse | PlainMessage<CreateSensorResponse> | undefined): boolean {
    return proto3.util.equals(CreateSensorResponse, a, b);
  }
}

/**
 * @generated from message sensor.GetSensorRequest
 */
export class GetSensorRequest extends Message<GetSensorRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetSensorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.GetSensorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorRequest {
    return new GetSensorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorRequest {
    return new GetSensorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorRequest {
    return new GetSensorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorRequest | PlainMessage<GetSensorRequest> | undefined, b: GetSensorRequest | PlainMessage<GetSensorRequest> | undefined): boolean {
    return proto3.util.equals(GetSensorRequest, a, b);
  }
}

/**
 * @generated from message sensor.GetSensorResponse
 */
export class GetSensorResponse extends Message<GetSensorResponse> {
  /**
   * @generated from field: sensor.Sensor sensor = 1;
   */
  sensor?: Sensor;

  constructor(data?: PartialMessage<GetSensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.GetSensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor", kind: "message", T: Sensor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorResponse {
    return new GetSensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorResponse {
    return new GetSensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorResponse {
    return new GetSensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorResponse | PlainMessage<GetSensorResponse> | undefined, b: GetSensorResponse | PlainMessage<GetSensorResponse> | undefined): boolean {
    return proto3.util.equals(GetSensorResponse, a, b);
  }
}

/**
 * @generated from message sensor.UpdateSensorRequest
 */
export class UpdateSensorRequest extends Message<UpdateSensorRequest> {
  /**
   * @generated from field: sensor.Sensor sensor = 1;
   */
  sensor?: Sensor;

  constructor(data?: PartialMessage<UpdateSensorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.UpdateSensorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor", kind: "message", T: Sensor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSensorRequest {
    return new UpdateSensorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSensorRequest {
    return new UpdateSensorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSensorRequest {
    return new UpdateSensorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSensorRequest | PlainMessage<UpdateSensorRequest> | undefined, b: UpdateSensorRequest | PlainMessage<UpdateSensorRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSensorRequest, a, b);
  }
}

/**
 * @generated from message sensor.UpdateSensorResponse
 */
export class UpdateSensorResponse extends Message<UpdateSensorResponse> {
  /**
   * @generated from field: sensor.Sensor sensor = 1;
   */
  sensor?: Sensor;

  constructor(data?: PartialMessage<UpdateSensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.UpdateSensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor", kind: "message", T: Sensor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSensorResponse {
    return new UpdateSensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSensorResponse {
    return new UpdateSensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSensorResponse {
    return new UpdateSensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSensorResponse | PlainMessage<UpdateSensorResponse> | undefined, b: UpdateSensorResponse | PlainMessage<UpdateSensorResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSensorResponse, a, b);
  }
}

/**
 * @generated from message sensor.DeleteSensorRequest
 */
export class DeleteSensorRequest extends Message<DeleteSensorRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteSensorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.DeleteSensorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSensorRequest {
    return new DeleteSensorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSensorRequest {
    return new DeleteSensorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSensorRequest {
    return new DeleteSensorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSensorRequest | PlainMessage<DeleteSensorRequest> | undefined, b: DeleteSensorRequest | PlainMessage<DeleteSensorRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSensorRequest, a, b);
  }
}

/**
 * @generated from message sensor.DeleteSensorResponse
 */
export class DeleteSensorResponse extends Message<DeleteSensorResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteSensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.DeleteSensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSensorResponse {
    return new DeleteSensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSensorResponse {
    return new DeleteSensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSensorResponse {
    return new DeleteSensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSensorResponse | PlainMessage<DeleteSensorResponse> | undefined, b: DeleteSensorResponse | PlainMessage<DeleteSensorResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSensorResponse, a, b);
  }
}

/**
 * The Sensor message represents a sensor in the system.
 *
 * @generated from message sensor.Sensor
 */
export class Sensor extends Message<Sensor> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 temperature = 2;
   */
  temperature = 0;

  /**
   * @generated from field: int32 humidity = 3;
   */
  humidity = 0;

  /**
   * @generated from field: int32 distance = 4;
   */
  distance = 0;

  /**
   * @generated from field: int32 light = 5;
   */
  light = 0;

  /**
   * @generated from field: int32 sound = 6;
   */
  sound = 0;

  constructor(data?: PartialMessage<Sensor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensor.Sensor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "temperature", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "humidity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "distance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "light", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "sound", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sensor {
    return new Sensor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJsonString(jsonString, options);
  }

  static equals(a: Sensor | PlainMessage<Sensor> | undefined, b: Sensor | PlainMessage<Sensor> | undefined): boolean {
    return proto3.util.equals(Sensor, a, b);
  }
}

